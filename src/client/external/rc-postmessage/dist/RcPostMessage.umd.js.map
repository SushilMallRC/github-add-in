{"version":3,"file":"RcPostMessage.umd.js","sources":["../src/constants.ts","../src/PostMessageBase.ts","../src/PostMessageApp.ts","../src/utils.ts","../src/PostMessageHost.ts","../src/PostMessageManager.ts","../src/index.ts"],"sourcesContent":["/*\n * @Author: Spike.Yang\n * @Date: 2020-05-14 13:01:04\n * @Last Modified time: 2020-05-14 13:01:04\n */\n\nconst INIT_CHANNEL = 'get-host-origin';\nconst TAG = 'RC-PostMessage';\nconst INIT_TARGET_ORIGIN = '*';\nconst DEFAULT_TIMEOUT = 5000;\n\nexport { INIT_CHANNEL, TAG, INIT_TARGET_ORIGIN, DEFAULT_TIMEOUT };\n","/*\n * @Author: Spike.Yang\n * @Date: 2020-05-14 13:05:42\n * @Last Modified time: 2020-05-14 13:05:42\n */\nimport {\n  Roles,\n  BaseProps,\n  Payload,\n  Listener,\n  Response,\n  EventType,\n  ResponseCode,\n  IPostMessageBase,\n} from './types';\nimport {\n  INIT_CHANNEL,\n  TAG,\n  INIT_TARGET_ORIGIN,\n  DEFAULT_TIMEOUT\n} from './constants';\n\nexport default abstract class PostMessageBase implements IPostMessageBase {\n  private _targetOrigin: string = INIT_TARGET_ORIGIN;\n  private _timeout: number = DEFAULT_TIMEOUT;\n  private _handleMaps: Map<string, Listener> = new Map();\n  private _eventMaps: Map<string, Listener> = new Map();\n  private _role: Roles = Roles.HOST;\n\n  constructor(public options: BaseProps, role: Roles) {\n    window.addEventListener('message', this._receiveMessage);\n    this._role = role;\n\n    const { targetOrigin, timeout } = options;\n\n    if (targetOrigin) {\n      this._targetOrigin = targetOrigin;\n      this.handle(INIT_CHANNEL, () => window.location.origin);\n    } else {\n      this._getTargetOrigin();\n    }\n\n    if (timeout) this._timeout = timeout;\n  }\n\n  private _getTargetOrigin = async () => {\n    try {\n      const result = await this.invoke(INIT_CHANNEL);\n      const { payload } = result;\n      payload && (this._targetOrigin = payload);\n      this._debug(`_targetOrigin: ${payload}`);\n    } catch (e) {}\n  }\n\n  private _receiveMessage = async (messageEvent: MessageEvent) => {\n    const { data, ports, origin } = messageEvent;\n\n    const { payload, type, channel } = data;\n    this._debug(`_receiveMessage type: ${type}, channel: ${channel}, payload: ${JSON.stringify(payload)}`);\n    if (!type || ![EventType.EVENT, EventType.HANDLE].includes(type)) return;\n\n    if (type === EventType.EVENT) {\n      const func = this._eventMaps.get(channel);\n      if (!func || typeof func !== 'function') return;\n      this._debug(`_receiveMessage type: ${EventType.EVENT}`);\n      func(payload, messageEvent);\n      return;\n    }\n\n    const port = ports[0];\n\n    this._debug(`_receiveMessage origin: ${origin}, targetOrigin: ${this.targetOrigin}`);\n    if (origin && this._targetOrigin !== '*' && origin !== this.targetOrigin) {\n      return;\n    };\n\n    const func = this._handleMaps.get(channel);\n    if (!func || typeof func !== 'function') return;\n\n    let result: any = {}\n    try {\n      result.payload = await func(payload, messageEvent);\n      result.code = ResponseCode.SUCCESS;\n    } catch (e) {\n      result.code = ResponseCode.ERROR;\n      result.error = this._formatMsg(`${channel} ${e.message}`);\n    }\n\n    this._debug(`_receiveMessage result: ${JSON.stringify(result)}`);\n\n    port.postMessage(result);\n  }\n\n  private _formatMsg = (msg: string) => {\n    return `[${TAG}-${this._role}]: ${msg}`;\n  }\n\n  private _wait = (channel: string, msgChannel: MessageChannel, timeout?: number,) => {\n    const time = timeout || this._timeout;\n    const timeoutResponse = {\n      code: ResponseCode.TIMEOUT,\n      error: this._formatMsg(`${channel} is timeout.`),\n      payload: null,\n    };\n    return new Promise<Response>((resolve, reject) => setTimeout(() => {\n      msgChannel.port1.close();\n      reject(timeoutResponse);\n    }, time));\n  }\n\n  private _debug = (msg: string) => {\n    this.options.debug && console.info(this._formatMsg(msg));\n  }\n\n  public invoke = (channel: string, payload?: Payload, timeout?: number) => {\n    const { contentWindow } = this.options;\n    if (!contentWindow) {\n      return Promise.reject({\n        code: ResponseCode.ERROR,\n        error: this._formatMsg(`${channel} contentWindow is undefined`),\n      });\n    }\n    const msgChannel = new MessageChannel();\n    this._debug(`invoke ${channel}`);\n\n    return Promise.race([\n      new Promise<Response>((resolve, reject) => {\n        contentWindow.postMessage({\n          type: EventType.HANDLE,\n          channel,\n          payload\n        }, this._targetOrigin, [msgChannel.port2]);\n\n        msgChannel.port1.onmessage = (messageEvent: MessageEvent) => {\n          const result = messageEvent.data as Response;\n          if (result.code !== ResponseCode.SUCCESS) {\n            reject(result);\n            return;\n          }\n          resolve(result);\n          msgChannel.port1.close();\n        }\n\n        msgChannel.port1.onmessageerror = (messageEvent: MessageEvent) => {\n          const error = {\n            code: ResponseCode.ERROR,\n            error: this._formatMsg(`${channel} onmessageerror`),\n          };\n          reject({ ...messageEvent.data, ...error });\n          msgChannel.port1.close();\n        }\n      }),\n      this._wait(channel, msgChannel, timeout),\n    ])\n  }\n\n  public handle = (channel: string, listener: Listener) => {\n    this._debug(`handle ${channel}`);\n    this._handleMaps.set(channel, listener);\n  }\n\n  public handleOnce = (channel: string, listener: Listener) => {\n    this._handleMaps.set(channel, (payload: Payload, event: MessageEvent) => {\n      this.removeHandler(channel);\n      return listener(payload, event);\n    });\n  }\n\n  public removeHandler = (channel: string) => {\n    this._handleMaps.delete(channel);\n  }\n\n  public removeAllHandler = () => {\n    this._handleMaps.clear();\n  }\n\n  public send = (channel: string, payload: Payload) => {\n    const { contentWindow } = this.options;\n    if (!contentWindow) return;\n\n    this._debug(`send ${channel} ${this._targetOrigin}`);\n    contentWindow.postMessage({\n      type: EventType.EVENT,\n      channel,\n      payload\n    }, this._targetOrigin);\n  }\n\n  public on = (channel: string, listener: Listener) => {\n    this._debug(`on ${channel}`);\n    this._eventMaps.set(channel, listener);\n  }\n\n  public once = (channel: string, listener: Listener) => {\n    this._eventMaps.set(channel, (payload: Payload, event: MessageEvent) => {\n      this.removeListener(channel);\n      return listener(payload, event);\n    });\n  }\n\n  public removeListener = (channel: string) => {\n    this._eventMaps.delete(channel);\n  }\n\n  public removeAllListeners = () => {\n    this._eventMaps.clear();\n  }\n\n  public get targetOrigin () {\n    return this._targetOrigin;\n  }\n\n  public get role () {\n    return this._role;\n  }\n\n  public dispose = () => {\n    window.removeEventListener('message', this._receiveMessage);\n    this.removeAllListeners();\n    this.removeAllHandler();\n  }\n};\n\n","/*\n * @Author: Spike.Yang\n * @Date: 2020-05-14 13:11:26\n * @Last Modified time: 2020-05-14 13:11:26\n */\nimport PostMessageBase from './PostMessageBase';\nimport { AppProps, IPostMessageApp, Roles } from './types';\n\nexport default class PostMessageApp extends PostMessageBase implements IPostMessageApp{\n  constructor(options: AppProps = {}) {\n    const baseOptions = { contentWindow: window.parent ? window.parent : typeof opener === 'object' ? opener : null, ...options,  }\n    super(baseOptions, Roles.APP);\n  }\n}\n","/*\n * @Author: Spike.Yang\n * @Date: 2020-05-14 13:06:28\n * @Last Modified time: 2020-05-14 13:06:28\n */\n\n\nconst uuid = () => {\n  // @ts-ignore\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n    (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)\n  );\n};\n\nexport default uuid;\n","/*\n * @Author: Spike.Yang\n * @Date: 2020-05-14 13:10:02\n * @Last Modified time: 2020-05-14 13:10:02\n */\nimport PostMessageBase from './PostMessageBase';\nimport { IPostMessageHost, HostProps, Roles } from './types';\n\nexport default class PostMessageHost extends PostMessageBase implements IPostMessageHost {\n  constructor(options: HostProps, public id: string) {\n    super(options,  Roles.HOST);\n  }\n }\n","/*\n * @Author: Spike.Yang\n * @Date: 2020-05-14 13:12:40\n * @Last Modified time: 2020-05-14 13:12:40\n */\nimport { IPostMessageManager, HostProps, Payload } from './types';\nimport uuid from './utils';\nimport PostMessageHost from './PostMessageHost';\nimport { TAG } from './constants';\n\nexport default class PostMessageManager implements IPostMessageManager {\n  private static _postMessageHostMaps = new Map<string, PostMessageHost>();\n\n  static addPostMessageHost = (id: string, instance: PostMessageHost) => {\n    PostMessageManager._postMessageHostMaps.set(id, instance);\n  }\n\n  public create = (options: HostProps) => {\n    const errorTag = `[${TAG}-Host]:`;\n    if (!options.contentWindow) {\n      throw new Error(`${errorTag} Missing required parameters contentWindow`);\n    }\n    if (!options.targetOrigin) {\n      throw new Error(`${errorTag} Missing required parameters targetOrigin`);\n    }\n    const id = uuid();\n    const instance = new PostMessageHost(options, id);\n    PostMessageManager.addPostMessageHost(id, instance);\n\n    return instance;\n  }\n\n  public destroy = (id: string) => {\n    PostMessageManager._postMessageHostMaps.delete(id);\n  }\n\n  public broadcast = (channel: string, payload: Payload) => {\n    for (const instance of PostMessageManager._postMessageHostMaps.values()) {\n      // @ts-ignore\n      if (instance && instance instanceof PostMessageHost) {\n        instance.send(channel, payload);\n      }\n    }\n  }\n}\n","/*\n * @Author: Spike.Yang\n * @Date: 2020-05-14 13:15:06\n * @Last Modified time: 2020-05-14 13:15:06\n */\n\nexport { default as PostMessageApp} from './PostMessageApp';\nexport { default as PostMessageManager} from './PostMessageManager';\n\n"],"names":[],"mappings":"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"}